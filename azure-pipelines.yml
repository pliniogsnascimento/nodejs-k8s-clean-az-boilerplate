# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'
strategy:
  matrix:
    node_10_x:
      node_version: 10.x

variables:
  major-release: 0
  minor-release: 0
  imageName: 'pliniogsnascimento/productsapi:$(major-release).$(minor-release).$(build.buildId)'
  azureSubscriptionEndpoint: Resource Manager
  azureResourceGroup: ecommerce-microservices
  kubernetesCluster: Ecommerce
  chartName: productsmicroservice

steps:
- task: NodeTool@0
  inputs:
    versionSpec: $(node_version)

- script: yarn install
  displayName: 'Build'

#- script: yarn test
#  displayName: 'Testing'

- script: docker build -f Dockerfile -t $(imageName) .
  displayName: 'Docker Build'

- task: Docker@1
  displayName: Container registry login
  inputs:
    command: login
    containerregistrytype: Container Registry
    dockerRegistryEndpoint: Docker Hub

- script: |
    docker push $(imageName)
  displayName: 'Publish on Dockerhub'

- task: HelmDeploy@0
  displayName: Helm init
  inputs:
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureResourceGroup: $(azureResourceGroup)
    kubernetesCluster: $(kubernetesCluster)
    command: init
    upgradetiller: true
    waitForExecution: true
    arguments: --client-only

- task: HelmDeploy@0
  displayName: Helm package
  inputs:
    command: package
    updatedependency: true
    chartPath: $(chartName)
    destination: $(Build.ArtifactStagingDirectory)
    arguments: --version $(major-release).$(minor-release).$(build.buildId)

- task: PublishPipelineArtifact@0
  inputs:
    artifactName: $(chartName)-$(major-release).$(minor-release).$(build.buildId)
    targetPath: '$(chartName)-$(major-release).$(minor-release).$(build.buildId).tgz'
